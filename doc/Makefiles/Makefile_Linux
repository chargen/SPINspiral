# Dependencies: lal, lalinspiral, lalframe (which needs libframe), lalmetaio (which needs metaio), fftw3, gsl

#No text/space after statements below!
CC=gcc#    Use GNU C compiler
#CC=clang#  Use Clang/LLVM
#CC=icc#    Use Intel C compiler


SRCDIR = src
OBJDIR = obj
INCDIR = include
BINDIR = .

DEF_MCMCOBJ =  $(OBJDIR)/SPINspiral_main.o $(OBJDIR)/SPINspiral_mcmc.o $(OBJDIR)/SPINspiral_templates.o $(OBJDIR)/SPINspiral_routines.o $(OBJDIR)/SPINspiral_data.o 
DEF_MCMCOBJ += $(OBJDIR)/SPINspiral_parameters.o $(OBJDIR)/SPINspiral_signal.o $(OBJDIR)/SPINspiral_lal.o $(OBJDIR)/SPINspiral_3rdparty.o 
DEF_CFLAGS = -I./$(INCDIR)
#DEF_LFLAGS = -llalmetaio -llal -lmetaio -lFrame -lfftw3 -lfftw3f -lgsl -lgslcblas -lz -lm   # Seems overkill
DEF_LFLAGS = -llalmetaio -llalinspiral -llal -llalframe -lfftw3 -lgsl                        # Default; ensure libFrame libfftw3 and libgsl support
#DEF_LFLAGS = #-llalmetaio -llal                                                             # Sufficient when lal compiled with libFrame, libfftw3 and libgsl support





# For the GNU compiler:
ifeq ($(CC),gcc)
   #CFLAGS = -O2 -w
   CFLAGS = -O3 -w
   #CFLAGS += -march=prescott        # Check the correct setting for your architecture
   #CFLAGS += -static

   #Debug:
   #CFLAGS = -O0 -Wall -Wextra -Werror
   #CFLAGS = -g -O0

   CFLAGS += -std=c99
endif


# For the Clang compiler:
ifeq ($(CC),clang)
   CFLAGS = -O2 -w
   #CFLAGS = -O3 -w
   #CFLAGS += -march=prescott        # Check the correct setting for your architecture
   #CFLAGS += -static

   #Debug:
   #CFLAGS = -O0 -Wall -Wextra
   #CFLAGS = -g -O0

   CFLAGS += -std=c99
endif


# For the Intel compiler:
ifeq ($(CC),icc)
   #CFLAGS = -O2
   CFLAGS = -O3

   #CFLAGS += -ipo
   #DEF_LFLAGS += -ipo -vec-report0

   #CFLAGS += -parallel
   #DEF_LFLAGS += -parallel

   #CFLAGS += -mtune=pentium4 -xP    # Check the correct setting for your architecture
   #CFLAGS += -xsse4.1               # Check the correct setting for your architecture
   #CFLAGS += -xhost                 # !!! Use only if you're compiling on the same machine/node as where you'll be running !!!

   #CFLAGS += -prof-gen -prof-dir./  # Don't use -ipo. Run the code thus compiled (a few times) and use -prof-use below (and -ipo if you like) for the final version
   #CFLAGS += -prof-use -prof-dir./

   CFLAGS += -traceback -vec-report0

   #DEF_LFLAGS += -static

   #Debug:
   CFLAGS = -O0 -traceback -Wcheck -Wall -wd981   # wd: disable: remark #981: operands are evaluated in unspecified order
   #CFLAGS = -g -O0

   CFLAGS += -std=c99
endif





#Targets:

$(OBJDIR)/%.o: $(SRCDIR)/%.c Makefile $(INCDIR)/SPINspiral.h
	$(CC) $(CFLAGS) $(DEF_CFLAGS) -c $< -o $@

all: SPINspiral

exit:


$(OBJDIR)/SPINspiral_3rdparty.o: $(INCDIR)/remez.h


SPINspiral: $(DEF_MCMCOBJ)
	$(CC) -o $(BINDIR)/SPINspiral $(DEF_MCMCOBJ) $(DEF_LFLAGS) 


clean:
	rm -f $(OBJDIR)/*.o $(INCDIR)/*.gch

cleanbin:
	rm -f SPINspiral

cleanoutput:
	rm -f mcmc.output.??????.?? *-signal*.dat

cleanoptimisation:
	rm -f ????????_?????.dyn pgopti.dpi pgopti.dpi.lock  #Intel -prof-gen stuff

cleanall: clean cleanbin cleanoutput cleanoptimisation

